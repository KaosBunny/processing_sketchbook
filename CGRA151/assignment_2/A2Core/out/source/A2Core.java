/* autogenerated by Processing revision 1283 on 2022-07-31 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class A2Core extends PApplet {

int background = color(255, 255, 255);
Vector2D velocity, acceleration;
Ball ball;

 public double deltaTime() {
    return 0.0f;
}

 public void setup() {
    /* size commented out by preprocessor */;
    frameRate(120);

    // Velocity
    velocity = new Vector2D(1.0f, 1.0f);
    acceleration = new Vector2D(0.0f, 0.0f);

    // Ball
    ball = new Ball(new Vector2D(100, 100), 25.0f);
}

// b r t b l t  r b t l b t r b l t

 public void update() {
    // Hit boxses neet to be fixed.
    if (ball.nextX(velocity) + ball.radius > width || ball.nextX(velocity) - ball.radius < 0) {
        // if (ball.nextX(velocity) > width) print( "R| ");
        // else print( "L| ");
        // print("Current X Position: " + ball.position.x + " Next X Position: " + (ball.position.x + velocity.x) + " Next Rs at: " + (ball.position.x + ball.radius) + " and " + (ball.position.x - ball.radius) + "\n");
        velocity.invertX();
    }
    if (ball.nextY(velocity) + ball.radius > height || ball.nextY(velocity) - ball.radius < 0) {
        // if (ball.nextY(velocity) > height) print( "B| ");
        // else print( "T| ");
        // print("Current Y Position: " + ball.position.y + " Next Y Position: " + (ball.position.y + velocity.y) + "\n");
        velocity.invertY();
    }
    ball.move(velocity);
}

 public void draw() {
    clear();    
    background(background);

    update();

    ball.draw();
}
class Ball {
    public Vector2D position;
    public float radius;
    private int currentColor;

    public void draw() {
        int restore = g.fillColor;
        fill(currentColor);
        ellipse(position.x, position.y, 2 * radius, 2 * radius);
        fill(restore);
    }

    public Vector2D getPos() {
        // No idea how to return an immutable reference to this object.
        return position;
    }

    public float nextX(Vector2D v) {
        return position.x + v.x;
    }

    public float nextY(Vector2D v) {
        return position.y + v.y;
    }

    public void move(Vector2D velocity) {
        this.position.add(velocity);
    }

    public Ball() {
        // Code Smell but it's fine this.
        position = new Vector2D(0, 0);
        radius = 1.0f;
        currentColor = color(0, 0, 0);
    }

    public Ball(Vector2D position, float radius) {
        currentColor = color(0, 0, 0);
        this.radius = radius;
        this.position = position;
    }
}
class Vector2D {
    float x;
    float y;

     public void invert() {
        x = -x;
        y = -y;
    }

     public void invertX() {
        x = -x;
    }

     public void invertY() {
        y = -y;
    }

     public void reflect() {
        float t = x;
        x = -y;
        y = -t;
    }

     public void add(Vector2D v) {
        x += v.x;
        y += v.y;
    }

    Vector2D() {
        x = 0;
        y = 0;
    }

    Vector2D(float x, float y) {
        this.x = x;
        this.y = y;
    }

    Vector2D(Vector2D v) {
        this.x = v.x;
        this.y = v.y;
    }
}


  public void settings() { size(680, 420); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "A2Core" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
